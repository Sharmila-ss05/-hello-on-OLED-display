module top_hello_ssd1331(
    input clk,
    input rst,
    output sclk,
    output mosi,
    output cs,
    output dc,
    output res_n,
    output vccen,
    output pmoden
);
    wire spi_done;
    wire [7:0] spi_data;
    wire spi_start;

    wire init_done;

    // Centered window for "hello"
    localparam HELLO_W = 29;
    localparam HELLO_H = 8;
    localparam COL_START = 33;
    localparam ROW_START = 28;

    // Drawing FSM
    reg [4:0] draw_state = 0;
    reg [15:0] pixel_cnt = 0;
    reg [7:0] draw_spi_data = 0;
    reg draw_spi_start = 0;
    reg draw_dc = 0;
    reg drawing = 0;
    reg done = 0;

    // For hello drawing
    reg [5:0] row = 0, col = 0;
    reg [2:0] char_idx = 0, char_col = 0;
    wire [4:0] font_bits;

    wire sclk_int, mosi_int, cs_int, dc_init, res_n_init;

    // Instantiate initialization module
    ssd1331_init oled_init (
        .clk(clk),
        .rst(rst),
        .spi_data(spi_data),
        .spi_start(spi_start),
        .spi_done(spi_done),
        .dc(dc_init),
        .res_n(res_n_init),
        .init_done(init_done)
    );

    // SPI master, used for both init and drawing
    spi_master spi (
        .clk(clk),
        .rst(rst),
        .data_in(drawing ? draw_spi_data : spi_data),
        .start(drawing ? draw_spi_start : spi_start),
        .sclk(sclk_int),
        .mosi(mosi_int),
        .cs(cs_int),
        .done(spi_done)
    );

    // Font ROM for "hello"
    font_rom_hello font(
        .char_idx(char_idx),
        .row(row[2:0]),
        .bits(font_bits)
    );

    always @(posedge clk or posedge rst) begin
        if(rst) begin
            draw_state <= 0;
            draw_spi_data <= 0;
            draw_spi_start <= 0;
            draw_dc <= 0;
            drawing <= 0;
            done <= 0;
            pixel_cnt <= 0;
            row <= 0; col <= 0;
            char_idx <= 0; char_col <= 0;
        end else if(init_done && !done) begin
            drawing <= 1;
            case(draw_state)
                // 1. Fill screen black
                0: begin // Set column address to full screen
                    draw_spi_data <= 8'h15; draw_spi_start <= 1; draw_dc <= 0; draw_state <= 1;
                end
                1: begin draw_spi_start <= 0; if (spi_done) begin draw_spi_data <= 8'd0; draw_spi_start <= 1; draw_state <= 2; end end
                2: begin draw_spi_start <= 0; if (spi_done) begin draw_spi_data <= 8'd95; draw_spi_start <= 1; draw_state <= 3; end end
                3: begin draw_spi_start <= 0; if (spi_done) begin draw_spi_data <= 8'h75; draw_spi_start <= 1; draw_state <= 4; end end
                4: begin draw_spi_start <= 0; if (spi_done) begin draw_spi_data <= 8'd0; draw_spi_start <= 1; draw_state <= 5; end end
                5: begin draw_spi_start <= 0; if (spi_done) begin draw_spi_data <= 8'd63; draw_spi_start <= 1; draw_state <= 6; end end
                6: begin draw_spi_start <= 0; if (spi_done) begin draw_dc <= 1; pixel_cnt <= 0; draw_state <= 7; end end
                7: begin // Send 96x64 black pixels
                    if(pixel_cnt < 96*64) begin
                        draw_spi_data <= 8'h00; draw_spi_start <= 1; draw_state <= 8;
                    end else begin
                        draw_state <= 20; // next: draw hello
                    end
                end
                8: begin draw_spi_start <= 0; if (spi_done) begin draw_spi_data <= 8'h00; draw_spi_start <= 1; draw_state <= 9; end end
                9: begin draw_spi_start <= 0; if (spi_done) begin pixel_cnt <= pixel_cnt + 1; draw_state <= 7; end end

                // 2. Draw centered "hello" (in a 29x8 box)
                20: begin // Set column window for hello
                    draw_spi_data <= 8'h15; draw_spi_start <= 1; draw_dc <= 0; draw_state <= 21;
                end
                21: begin draw_spi_start <= 0; if (spi_done) begin draw_spi_data <= COL_START; draw_spi_start <= 1; draw_state <= 22; end end
                22: begin draw_spi_start <= 0; if (spi_done) begin draw_spi_data <= COL_START+HELLO_W-1; draw_spi_start <= 1; draw_state <= 23; end end
                23: begin draw_spi_start <= 0; if (spi_done) begin draw_spi_data <= 8'h75; draw_spi_start <= 1; draw_state <= 24; end end
                24: begin draw_spi_start <= 0; if (spi_done) begin draw_spi_data <= ROW_START; draw_spi_start <= 1; draw_state <= 25; end end
                25: begin draw_spi_start <= 0; if (spi_done) begin draw_spi_data <= ROW_START+HELLO_H-1; draw_spi_start <= 1; draw_state <= 26; end end
                26: begin draw_spi_start <= 0; if (spi_done) begin draw_dc <= 1; row <= 0; col <= 0; draw_state <= 27; end end
                27: begin // Each pixel in 29x8 region
                    if(row < HELLO_H) begin
                        if(col < HELLO_W) begin
                            // Determine which char and col in char
                            if      (col < 5 ) begin char_idx = 0; char_col = col;        end
                            else if (col < 6 ) begin char_idx = 0; char_col = 7;         end // space
                            else if (col < 11) begin char_idx = 1; char_col = col-6;     end
                            else if (col < 12) begin char_idx = 1; char_col = 7;         end
                            else if (col < 17) begin char_idx = 2; char_col = col-12;    end
                            else if (col < 18) begin char_idx = 2; char_col = 7;         end
                            else if (col < 23) begin char_idx = 3; char_col = col-18;    end
                            else if (col < 24) begin char_idx = 3; char_col = 7;         end
                            else if (col < 29) begin char_idx = 4; char_col = col-24;    end
                            else begin           char_idx = 0; char_col = 7;             end

                            // Font bit for this pixel
                            if (char_col < 5 && font_bits[4-char_col])
                                draw_spi_data <= 8'hFF; // White high
                            else
                                draw_spi_data <= 8'h00; // Black high

                            draw_spi_start <= 1;
                            draw_state <= 28;
                        end else begin
                            col <= 0;
                            row <= row + 1;
                        end
                    end else begin
                        draw_state <= 99;
                    end
                end
                28: begin draw_spi_start <= 0; if (spi_done) begin
                        if (draw_spi_data == 8'hFF)
                            draw_spi_data <= 8'hFF; // White low
                        else
                            draw_spi_data <= 8'h00; // Black low
                        draw_spi_start <= 1;
                        draw_state <= 29;
                end end
                29: begin draw_spi_start <= 0; if (spi_done) begin col <= col + 1; draw_state <= 27; end end

                99: begin done <= 1; drawing <= 0; end
                default: draw_state <= 0;
            endcase
        end
    end

    assign sclk   = sclk_int;
    assign mosi   = mosi_int;
    assign cs     = cs_int;
    assign dc     = drawing ? draw_dc : dc_init;
    assign res_n  = res_n_init;
    assign vccen  = 1'b1;
    assign pmoden = 1'b1;

endmodule

